version: 2.1

orbs: 
  slack: circleci/slack@4.9.3
  docker: circleci/docker@1.5.0
  kubernetes: circleci/kubernetes@1.3.0

commands:
  rollback:
    description: rollback 
    steps:
      - run:
          name: rollback
          when: on_fail
          command: |
            make rollback
  install-kubectl:          
    description: |
      Installs kubectl (latest release, by default)
      Requirements: curl, amd64 architecture
    parameters:
      kubectl-version:
        default: 1.23.4
        type: string
      max-time:
        default: false
        description: |
          This parameter will enable the curl command to not timeout for 600 seconds
        type: boolean
    steps:
      - run:
          command: |
            #!/bin/bash
            KUBECTL_VERSION=$(eval echo "$PARAM_KUBECTL_VERSION")
            MAX_TIME=$(eval echo "$PARAM_MAX_TIME")
            if [ "$KUBECTL_VERSION" == "latest" ]; then
                # get latest kubectl release
                KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
            fi

            PLATFORM="linux"
            if [ -n "$(uname | grep "Darwin")" ]; then
                PLATFORM="darwin"
            fi

            # download kubectl
            if [ "$MAX_TIME" == "1" ]; then
                curl --max-time 300 -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl
            else 
                curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl
            fi

            [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

            $SUDO chmod +x ./kubectl

            $SUDO mv ./kubectl /usr/local/bin
          environment:
            PARAM_KUBECTL_VERSION: <<parameters.kubectl-version>>
            PARAM_MAX_TIME: <<parameters.max-time>>
          name: Install kubectl


jobs:
  lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "hello_app/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            # - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv .devops
            source .devops/bin/activate
            make install
      - save_cache:
          paths:
            - ./.devops  # TODO: Include in cache the "bin" directory
          key: v1-dependencies-{{ checksum "hello_app/requirements.txt" }}
      - run:
          name: Run lint
          command: |
            source .devops/bin/activate
            make lint 
      - slack/notify:
          event: fail
          template: basic_fail_1 


  upload-docker:
      docker:
        - image: cimg/go:1.17
      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.11

        - run:
            name: login to dockerhub
            command: |
              docker login -u="$docker_user" -p="$docker_pass"
        - run:
            name: Upload Docker to Dockerhub
            command: |
              make upload-docker
        - slack/notify:
            event: fail
            template: basic_fail_1 


  deploy-infrastructure and app:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            install minikube-linux-amd64 /usr/local/bin/minikube
            minikube start
            minikube kubectl -- get po -A
            make install-K8Stools
      - run:
          name: deploy cluster
          command: |
            make k8s-deployment
      - slack/notify:
          event: fail
          template: basic_fail_1 

  # deploy-app:
  #   docker:
  #     - image: python:3.7.3-stretch
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           make install-K8Stools
  #     - run:
  #         name: deploy hello app
  #         command: |      
  #           make k8s-deployment
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1 

workflows:
  default:
    jobs:
      - lint
      - upload-docker:
          requires: [lint]
      - deploy-infrastructure and app:
          requires: [lint, upload-docker]      
      # - deploy-app: 
      #     requires: [upload-docker, deploy-infrastructure ] 